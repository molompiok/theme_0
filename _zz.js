/*



Voici un **r√©sum√© complet** et clair de la solution que tu peux copier dans un fichier m√©mo pour t‚Äôen souvenir :

---

### ‚úÖ **M√©mo : Servir Vike SSR avec un chemin de base dynamique (`/ladonaX`)**

#### üß© **Contexte**

* Application Vike SSR servie derri√®re NGINX via Express.
* Chaque boutique est disponible sous un chemin dynamique :
  `https://mon-domaine.com/ladona2`, `.../ladona3`, etc.
* Les assets (`/assets/...`) et les liens doivent respecter ce chemin dynamique.

---

#### üéØ **Objectif**

* G√©n√©rer dynamiquement les URLs d‚Äôassets et de navigation c√¥t√© serveur et client.
* Injecter un `<base href="/ladonaX/">` dans le HTML pour les liens relatifs.
* Faire en sorte que `pageContext.baseUrl` soit disponible c√¥t√© client.

---

### üöÄ **√âtapes de mise en ≈ìuvre**

#### 1. **Configurer le proxy NGINX**

```nginx
location ~ ^/(ladona[0-9]+)/(.*)$ {
    proxy_set_header X-Base-Url /$1/;
    proxy_pass http://localhost:3000/$2$is_args$args;
    proxy_set_header Host $host;
}
```

#### 2. **R√©cup√©rer `X-Base-Url` dans `onRenderHtml()`**

```ts
const baseUrlFromHeader = (pageContext.headers as Record<string, string>)['x-base-url'] || '/'
```

#### 3. **Injecter le `baseUrl` dans le HTML g√©n√©r√©**

```tsx
<base href="${baseUrlFromHeader}" />
```

#### 4. **Retourner le `baseUrl` dans `pageContext`**

```ts
return {
  documentHtml,
  pageContext: {
    baseUrl: baseUrlFromHeader,
    serverUrl: serverUrlFromHeader,
    apiUrl: apiUrlFromHeader,
    lang
  }
}
```

#### 5. **D√©clarer `baseUrl` dans `+config.ts`**

```ts
export default {
  passToClient: ['baseUrl', 'serverUrl', 'apiUrl', 'lang', 'pageProps']
}
```

---

### ‚úÖ **R√©sultat**

* Les assets sont bien charg√©s depuis `/ladonaX/assets/...`
* La navigation fonctionne correctement avec `<base href="...">`
* `pageContext.baseUrl` est disponible c√¥t√© client (React / hooks / etc.)
* Plus d‚Äôerreurs li√©es √† des assets mal r√©solus ou des `pageContext` manquants

---

### üß† Astuce

* Tu peux utiliser `pageContext.baseUrl` dans les composants pour construire dynamiquement les routes (`<Link to={baseUrl + 'dashboard'}>`).

---

Tu peux coller ce m√©mo dans un fichier `docs/memo-vike-ssr-multibase.md` par exemple. Si tu veux aussi documenter la configuration c√¥t√© client pour des helpers de navigation, je peux t‚Äôaider √† compl√©ter.





*/